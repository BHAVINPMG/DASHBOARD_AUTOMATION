---
description: 
globs: 
alwaysApply: false
---
# Cursor Rules: Chart Visualization JSON Generator

## Overview
These rules help generate valid JSON configurations for chart visualizations based on a specific schema. Always ensure complete structural integrity and never omit mandatory fields.

## Core Principles
1. **NEVER omit any field** from the mandatory structure
2. **Always validate** against the provided JSON schema
3. **Use exact default values** unless explicitly overridden by user
4. **Maintain structural integrity** - missing fields = failed generation

## ⚠️ CRITICAL RULES - COMMON MISTAKES TO AVOID

### 1. **NEVER Include Unnecessary Filters**
- **Default behavior**: Use empty filter objects `{}` for all filter types
- **Only add filters** when user explicitly requests filtering
- **Wrong**: Including complex filter conditions for basic metrics
- **Correct**: 
```json
"filters": {
  "data.filter": {},
  "result.filter": {},
  "drill.down.filter": {}
}
```

### 2. **Correct visualization.result.by Usage**
- **For metric type**: Use `"monitor"` (NOT `"object.id"`)
- **For policy type with category metric**: Use `"object.id"` (special case)
- **Wrong**: `"visualization.result.by": ["object.id"]` for metric data sources
- **Correct**: `"visualization.result.by": ["monitor"]` for metric data sources

### 3. **Mandatory Default Structure Template**

```json
{
  "id": -1,
  "container.type": "dashboard",
  "visualization.name": "",
  "visualization.description": "",
  "visualization.granularity": "10 m",
  "visualization.timeline": {
    "relative.timeline": "today",
    "visualization.time.range.inclusive": "no"
  },
  "visualization.category": "Chart",
  "visualization.type": "Line",
  "visualization.data.sources": [
    {
      "type": "metric",
      "filters": {
        "data.filter": {},
        "result.filter": {},
        "drill.down.filter": {}
      },
      "data.points": [
        {
          "data.point": "system.cpu.percent",
          "aggregator": "avg"
        }
      ]
    }
  ],
  "visualization.properties": {
    "chart": {
      "rotation.angle": "10",
      "chart.legend": "yes",
      "vertical.legend": "no",
      "line.width": 2,
      "chart.label": "no",
      "highchart.settings": {},
      "marker.property": [
        {
          "marker.threshold": [null, null]
        }
      ],
      "sorting": {
        "limit": 10,
        "order": "desc"
      }
    }
  },
  "visualization.result.by": ["monitor"],
  "granularity": {
    "value": "10",
    "unit": "m"
  }
}
```

## Field-Specific Rules

### Timeline Configuration
- **Default**: `"relative.timeline": "today"`
- **Valid patterns**: `custom|today|yesterday|this.(week|month)|last.(week|month|quarter|year)|-\d+[mhd]`
- **Custom timeline requires**: `from.date`, `from.time`, `to.date`, `to.time`
- **Date format**: `YYYY/MM/DD`
- **Time format**: `HH:MM:SS`

### Granularity Rules
- **Pattern**: `^\d+\s[s|m|h|d|M]$`
- **Default**: `"10 m"`
- **Units**: `s` (seconds), `m` (minutes), `h` (hours), `d` (days), `M` (months)
- **Must match** both `visualization.granularity` string and `granularity` object

### Visualization Types
```typescript
type VisualizationType = 
  | "Area" | "Line" | "HorizontalBar" | "VerticalBar"
  | "StackedArea" | "StackedLine" | "StackedHorizontalBar" | "StackedVerticalBar"
```

### Data Source Types
```typescript
type DataSourceType = "metric" | "log" | "flow" | "policy" | "availability"
```

**Note**: The `category` field is only available when `type` is `"policy"`. For policy types, the category can be `"metric"`, `"log"`, `"flow"`, or `"trap"`.

### Aggregator Functions
```typescript
type Aggregator = "avg" | "min" | "max" | "sum" | "count"
```

### Statistical Functions (Optional)
```typescript
type StatisticalFunc = 
  | "ema3" | "ema5" | "ema7" | "ema10" | "ema20"
  | "median3" | "median5" | "median7" | "median9"
  | "monotonic" | "delta" | "cumulative.sum"
  | "log2" | "log10"
```

## Filter Structure Rules

### Data Filter Template
```json
{
  "data.filter": {
    "operator": "and|or",
    "filter": "include|exclude",
    "groups": [
      {
        "filter": "include|exclude",
        "operator": "and|or",
        "conditions": [
          {
            "operand": "field_name",
            "operator": "=|contains|in|start with|end with",
            "value": "string|number|boolean"
          }
        ]
      }
    ]
  }
}
```

## Entity Configuration Rules

### Entity Types
- `"Monitor"`: Use with `entities` array of integers
- `"Group"`: Use with `entities` array of integers  
- `"Tag"`: Use with `entities` array of integers
- **No entity.type**: `entities` array must be empty `[]`

### Result Grouping
```typescript
type ResultBy = "monitor" | "tag" | "group"
```

## 🧩 Data Source Type-Specific Rules

### Rules for `entity.type` Based on Data Source Type

Set allowed values for `entity.type` based on the `type` of data source:

| `type`         | Allowed `entity.type` Values                       |
| -------------- | -------------------------------------------------- |
| `metric`       | `"Monitor"`, `"Group"`, `"Tag"`                    |
| `availability` | `"Monitor"`, `"Group"`, `"Tag"`                    |
| `policy`       | `"Monitor"`, `"Group"`, `"Tag"`                    |
| `log`          | `"event.source"`, `"event.source.type"`, `"Group"` |
| `flow`         | `"event.source"`, `"Group"`                        |

### Rules for `aggregator` Based on Data Source Type

Set allowed values for `aggregator` based on the `type` of data source:

| `type`         | Allowed `aggregator` Values                   |
| -------------- | --------------------------------------------- |
| `metric`       | `"avg"`, `"min"`, `"max"`, `"sum"`, `"count"` |
| `availability` | `"avg"`, `"min"`, `"max"`, `"sum"`, `"count"` |
| `policy`       | `"count"`                                     |
| `log`          | `"count"`                                     |
| `flow`         | `"avg"`, `"sum"`, `"count"`                   |

### Rules for `visualization.result.by` Based on Data Source Type and Category

Define allowed and default values based on the `type` and optionally the `category`:

#### ▶ Type: `metric` or `availability`

* Allowed values: `"monitor"`, `"group"`, `"tag"`
* Max selections: **1 only**
* Default: `"monitor"`

#### ▶ Type: `log`

* Allowed values:
  * `"event.source.type"`
  * `"event.severity"`
  * `"event.category"`
  * `"event.source"`
* Max selections: **4**
* Default: `"event.source.type"`

#### ▶ Type: `flow`

* Allowed values:
  * `"destination.aso"`, `"destination.port"`, `"source.aso"`, `"destination.if.index"`,
  * `"destination.isp"`, `"source.domain"`, `"destination.threat"`, `"protocol"`,
  * `"destination.city"`, `"source.ip"`, `"tos"`, `"source.isp"`, `"source.city"`,
  * `"tcp.flags"`, `"source.as"`, `"source.threat"`, `"destination.domain"`,
  * `"destination.ip.as"`, `"destination.ip"`, `"source.country"`, `"source.if.index"`,
  * `"application"`, `"source.port"`, `"event.source"`, `"destination.as"`,
  * `"destination.country"`, `"user"`
* Max selections: **4**
* Default: `["source.ip", "destination.ip"]`

#### ▶ Type: `policy`, Category: `metric`

* Allowed values: `"monitor"`, `"severity"`, `"policy.id"`, `"object.id"`
* Max selections: **1 only**
* Default: `"monitor"` (but always use `"object.id"` in generated JSON if user specifies monitor)

**Special Rule:**
> For type `policy` and category `metric`, if the user specifies `visualization.result.by` as `monitor`, always use `object.id` in the generated JSON.

**Example:**
```json
{
  "visualization.name": "Policy Violations",
  "visualization.type": "Line",
  "visualization.data.sources": [
    {
      "type": "policy",
      "category": "metric",
      "data.points": [
        { "data.point": "severity", "aggregator": "count" }
      ],
      "visualization.result.by": ["object.id"]
    }
  ],
  "visualization.properties": {
    "chart": {
      "sorting": {
        "limit": 10,
        "order": "desc",
        "column": "severity.count"
      }
    }
  }
}
```

#### ▶ Type: `policy`, Category: `log`, `trap`, or `flow`

* Allowed values: `"severity"`, `"policy.id"`
* Max selections: **1 only**
* Default: `"severity"`

### Enforcement Rules for Data Source Types

* If the `type` is not matched with its respective `entity.type`, `aggregator`, or `visualization.result.by`, reject the JSON as **invalid**.
* If no `entity.type` or `visualization.result.by` is explicitly provided and the schema allows it, use defaults.
* Prevent invalid combinations like `metric` with `"event.source"` or `log` with `"avg"`.
* Ensure that combinations like `metric` with `"entity.type": "event.source"` or `log` with `"aggregator": "avg"` are strictly **disallowed**.

## Chart Properties Rules

### Marker Properties
```json
{
  "marker.type": "line|range",
  "marker.threshold": number | [number, number],
  "marker.color": "CLEAR|WARNING|CRITICAL|MAJOR",
  "marker.line.type": "solid.bold|solid|dash",
  "marker.label": "string"
}
```

### Sorting Rules
- **Limit**: Maximum 50
- **Order**: `"asc"` or `"desc"`
- **Always include** both limit and order

## Validation Checklist

Before generating, verify:
- [ ] All mandatory fields present
- [ ] Granularity format matches pattern
- [ ] Timeline configuration is valid
- [ ] Data source type is valid enum value
- [ ] Aggregator is valid enum value
- [ ] Visualization type is valid enum value
- [ ] Filter operators use valid enum values
- [ ] Entity configuration follows rules
- [ ] **Maximum 4 markers** in marker.property array
- [ ] **Every marker has marker.line.type** field (MANDATORY)
- [ ] Marker properties use valid enum values
- [ ] Sorting limit ≤ 50

## Error Prevention

### Common Mistakes to Avoid
1. **Missing nested objects**: Always include `filters`, `chart`, `granularity` objects
2. **Empty arrays where objects expected**: `data.points` needs objects, not empty array
3. **Incorrect enum values**: Double-check all enum constraints
4. **Mismatched granularity**: String and object must align
5. **Invalid date/time formats**: Follow exact patterns

### Required Non-Empty Fields
- `visualization.data.sources` - Must have at least one source
- `data.points` - Must have at least one data point
- `visualization.result.by` - Must have at least one grouping method

## Usage Examples

### Basic CPU Monitoring
```json
{
  "visualization.name": "CPU Usage Monitor",
  "visualization.description": "Real-time CPU percentage tracking",
  "data.points": [
    {
      "data.point": "system.cpu.percent",
      "aggregator": "avg"
    }
  ]
}
```

### Custom Time Range
```json
{
  "visualization.timeline": {
    "relative.timeline": "custom",
    "from.date": "2024/01/01",
    "from.time": "00:00:00",
    "to.date": "2024/01/31",
    "to.time": "23:59:59",
    "visualization.time.range.inclusive": "yes"
  }
}
```

### Multiple Metrics with Entities
```json
{
  "data.points": [
    {
      "data.point": "system.memory.usage",
      "aggregator": "max",
      "entity.type": "Monitor",
      "entities": [1, 2, 3]
    }
  ]
}
```

## Conditional Logic and Validation Rules

### 🔢 Data Source Constraints
- **Maximum 2** `visualization.data.sources` allowed
- **NEVER exceed** this limit regardless of user request

### 📊 Type-Specific Rules

#### `"type": "metric"`
- **Maximum 4** `data.points` allowed per source
- **Conditional Result Grouping**:
  - If **only 1** `data.point`: `"visualization.result.by": ["monitor"]`
  - If **more than 1** `data.point`: `"visualization.result.by": []` (empty array)

#### `"type": "availability"`
- **Maximum 4** `data.points` allowed per source
- **Single Source Constraint**: When any data source has `"type": "availability"`, the entire `visualization.data.sources` array can contain **ONLY ONE source** (the availability source)
- **Conditional Result Grouping**:
  - If **only 1** `data.point`: `"visualization.result.by": ["monitor"]`
  - If **more than 1** `data.point`: `"visualization.result.by": []` (empty array)

#### `"type": "log"`
- **Unlimited** `data.points` allowed
- **MUST set** source `"category": "log"` within `visualization.data.sources`
- **Override default** category when this type is used

#### `"type": "flow"`
- **Unlimited** `data.points` allowed
- **MUST set** source `"category": "flow"` within `visualization.data.sources`
- **Override default** category when this type is usedx 

#### `"type": "alert"`
- **Only 1** `data.point` allowed
- **ENFORCE strictly** - reject requests for multiple data points

### 🧩 Filter Group Constraints

#### `data.filter.groups`
- **Maximum 3 groups** per data filter
- **Maximum 3 conditions** per group
- **Structure validation**:
```json
{
  "data.filter": {
    "groups": [
      {
        "conditions": [
          // MAX 3 conditions here
        ]
      }
      // MAX 3 groups total
    ]
  }
}
```

#### `result.filter`
- **Maximum 1 group** only
- **Maximum 3 conditions** in that single group
- **Structure validation**:
```json
{
  "result.filter": {
    "groups": [
      {
        "conditions": [
          // MAX 3 conditions here
        ]
      }
      // ONLY 1 group allowed
    ]
  }
}
```

### 📈 Statistical Function Rules

#### Default Behavior
- **NO statistical function** included by default
- **Only add** when user explicitly requests

#### User Intent Mapping
- User says **"moving average"** → `"statistical.func": "ema5"`
- User says **"median"** → `"statistical.func": "median5"`
- **No mention** → **Omit field entirely**

#### Application Example
```json
// User requests "show CPU with moving average"
{
  "data.points": [
    {
      "data.point": "system.cpu.percent",
      "aggregator": "avg",
      "statistical.func": "ema5"
    }
  ]
}

// User requests basic CPU (no statistical function mentioned)
{
  "data.points": [
    {
      "data.point": "system.cpu.percent",
      "aggregator": "avg"
      // NO statistical.func field
    }
  ]
}
```

### 🎯 Marker Constraints
- **Maximum 4 markers** allowed in `marker.property` array
- **NEVER exceed** this limit regardless of user request
- **MANDATORY**: `marker.line.type` field is **REQUIRED** for every marker
- **Structure validation**:
```json
{
  "marker.property": [
    // MAXIMUM 4 marker objects allowed
    {
      "marker.type": "line|range",
      "marker.threshold": "number | [number, number]",
      "marker.color": "CLEAR|WARNING|CRITICAL|MAJOR",
      "marker.line.type": "solid.bold|solid|dash", // REQUIRED FIELD
      "marker.label": "string"
    }
  ]
}
```

#### Maximum Markers Example (4 markers - DO NOT EXCEED)
```json
"marker.property": [
  {
    "marker.type": "line",
    "marker.threshold": 25,
    "marker.color": "CLEAR",
    "marker.line.type": "solid",
    "marker.label": "Low Activity (25%)"
  },
  {
    "marker.type": "line",
    "marker.threshold": 30,
    "marker.color": "CLEAR",
    "marker.line.type": "dash",
    "marker.label": "Normal Threshold (50%)"
  },
  {
    "marker.type": "range",
    "marker.threshold": [0, 10],
    "marker.color": "MAJOR",
    "marker.line.type": "solid",
    "marker.label": "Moderate Usage (65%)"
  },
  {
    "marker.type": "range",
    "marker.threshold": [10, 20],
    "marker.color": "WARNING",
    "marker.line.type": "dash",
    "marker.label": "Elevated Usage (75%)"
  }
]
```

#### Marker Validation Rules
- **Count check**: Array length ≤ 4
- **Required fields**: Every marker MUST have `marker.line.type`
- **Type validation**: `"line"` uses single number, `"range"` uses array of 2 numbers
- **Color validation**: Must be one of `CLEAR|WARNING|CRITICAL|MAJOR`
- **Line type validation**: Must be one of `solid.bold|solid|dash`

## Validation Workflow

### Pre-Generation Checks
1. **Count data sources** - Reject if > 2
2. **Check data source type** - Apply type-specific rules
3. **Count data points** - Enforce type-specific limits
4. **Validate filter groups** - Enforce group/condition limits
5. **Count markers** - Reject if > 4 markers
6. **Check statistical functions** - Only include if explicitly requested
7. **Set result grouping** - Apply conditional logic based on data point count
8. **Validate entity.type** - Ensure compatibility with data source type
9. **Validate aggregator** - Ensure compatibility with data source type
10. **Validate visualization.result.by** - Enforce type-specific constraints and limits
11. **Validate category field** - Only allow for policy types

### Type-Specific Validation
```typescript
function validateDataSource(source, allSources) {
  switch(source.type) {
    case "metric":
      if (source.data.points.length > 4) throw "Max 4 data points for metric"
      
      // Validate entity.type for metric
      source.data.points.forEach(point => {
        if (point.entity?.type && !["Monitor", "Group", "Tag"].includes(point.entity.type)) {
          throw `Invalid entity.type "${point.entity.type}" for metric. Allowed: Monitor, Group, Tag`
        }
        if (point.aggregator && !["avg", "min", "max", "sum", "count"].includes(point.aggregator)) {
          throw `Invalid aggregator "${point.aggregator}" for metric. Allowed: avg, min, max, sum, count`
        }
      })
      
      // Validate visualization.result.by for metric
      if (source.visualization?.result?.by) {
        if (source.visualization.result.by.length > 1) {
          throw "Max 1 selection for visualization.result.by with metric type"
        }
        const validResultBy = ["monitor", "group", "tag"]
        if (!validResultBy.includes(source.visualization.result.by[0])) {
          throw `Invalid visualization.result.by "${source.visualization.result.by[0]}" for metric. Allowed: ${validResultBy.join(", ")}`
        }
      }
      
      if (source.data.points.length === 1) {
        source.visualization.result.by = ["monitor"]
      } else {
        source.visualization.result.by = []
      }
      break;
    
    case "availability":
      // Availability sources must be the ONLY source in the array
      if (allSources.length > 1) throw "Availability type requires single source only"
      if (source.data.points.length > 4) throw "Max 4 data points for availability"
      
      // Validate entity.type for availability
      source.data.points.forEach(point => {
        if (point.entity?.type && !["Monitor", "Group", "Tag"].includes(point.entity.type)) {
          throw `Invalid entity.type "${point.entity.type}" for availability. Allowed: Monitor, Group, Tag`
        }
        if (point.aggregator && !["avg", "min", "max", "sum", "count"].includes(point.aggregator)) {
          throw `Invalid aggregator "${point.aggregator}" for availability. Allowed: avg, min, max, sum, count`
        }
      })
      
      // Validate visualization.result.by for availability
      if (source.visualization?.result?.by) {
        if (source.visualization.result.by.length > 1) {
          throw "Max 1 selection for visualization.result.by with availability type"
        }
        const validResultBy = ["monitor", "group", "tag"]
        if (!validResultBy.includes(source.visualization.result.by[0])) {
          throw `Invalid visualization.result.by "${source.visualization.result.by[0]}" for availability. Allowed: ${validResultBy.join(", ")}`
        }
      }
      
      if (source.data.points.length === 1) {
        source.visualization.result.by = ["monitor"]
      } else {
        source.visualization.result.by = []
      }
      break;
    
    case "log":
      if (source.data.points.length > 4) throw "Max 4 data points for log"
      
      // Validate entity.type for log
      source.data.points.forEach(point => {
        if (point.entity?.type && !["event.source", "event.source.type", "Group"].includes(point.entity.type)) {
          throw `Invalid entity.type "${point.entity.type}" for log. Allowed: event.source, event.source.type, Group`
        }
        if (point.aggregator && point.aggregator !== "count") {
          throw `Invalid aggregator "${point.aggregator}" for log. Only "count" is allowed`
        }
      })
      
      // Validate visualization.result.by for log
      if (source.visualization?.result?.by) {
        if (source.visualization.result.by.length > 4) {
          throw "Max 4 selections for visualization.result.by with log type"
        }
        const validResultBy = ["event.source.type", "event.severity", "event.category", "event.source"]
        source.visualization.result.by.forEach(resultBy => {
          if (!validResultBy.includes(resultBy)) {
            throw `Invalid visualization.result.by "${resultBy}" for log. Allowed: ${validResultBy.join(", ")}`
          }
        })
      } else {
        source.visualization.result.by = ["event.source.type"]
      }
      
      if (source.data.points.length === 1) {
        source.visualization.result.by = ["monitor"]
      } else {
        source.visualization.result.by = []
      }
      source.category = "log"
      break;
    
    case "flow":
      if (source.data.points.length > 4) throw "Max 4 data points for flow"
      
      // Validate entity.type for flow
      source.data.points.forEach(point => {
        if (point.entity?.type && !["event.source", "Group"].includes(point.entity.type)) {
          throw `Invalid entity.type "${point.entity.type}" for flow. Allowed: event.source, Group`
        }
        if (point.aggregator && !["avg", "sum", "count"].includes(point.aggregator)) {
          throw `Invalid aggregator "${point.aggregator}" for flow. Allowed: avg, sum, count`
        }
      })
      
      // Validate visualization.result.by for flow
      if (source.visualization?.result?.by) {
        if (source.visualization.result.by.length > 4) {
          throw "Max 4 selections for visualization.result.by with flow type"
        }
        const validResultBy = [
          "destination.aso", "destination.port", "source.aso", "destination.if.index",
          "destination.isp", "source.domain", "destination.threat", "protocol",
          "destination.city", "source.ip", "tos", "source.isp", "source.city",
          "tcp.flags", "source.as", "source.threat", "destination.domain",
          "destination.ip.as", "destination.ip", "source.country", "source.if.index",
          "application", "source.port", "event.source", "destination.as",
          "destination.country", "user"
        ]
        source.visualization.result.by.forEach(resultBy => {
          if (!validResultBy.includes(resultBy)) {
            throw `Invalid visualization.result.by "${resultBy}" for flow. Allowed: ${validResultBy.join(", ")}`
          }
        })
      } else {
        source.visualization.result.by = ["source.ip", "destination.ip"]
      }
      
      if (source.data.points.length === 1) {
        source.visualization.result.by = ["monitor"]
      } else {
        source.visualization.result.by = []
      }
      source.category = "flow"
      break;
    
    case "policy":
      // Validate category field - only allowed for policy type
      if (source.category && !["metric", "log", "flow", "trap"].includes(source.category)) {
        throw `Invalid category "${source.category}" for policy. Allowed: metric, log, flow, trap`
      }
      
      // Validate entity.type for policy
      source.data.points.forEach(point => {
        if (point.entity?.type && !["Monitor", "Group", "Tag"].includes(point.entity.type)) {
          throw `Invalid entity.type "${point.entity.type}" for policy. Allowed: Monitor, Group, Tag`
        }
        if (point.aggregator && point.aggregator !== "count") {
          throw `Invalid aggregator "${point.aggregator}" for policy. Only "count" is allowed`
        }
      })
      
      // Validate visualization.result.by for policy based on category
      if (source.visualization?.result?.by) {
        if (source.visualization.result.by.length > 1) {
          throw "Max 1 selection for visualization.result.by with policy type"
        }
        
        let validResultBy = []
        if (source.category === "metric") {
          validResultBy = ["monitor", "severity", "policy.id"]
        } else if (["log", "trap", "flow"].includes(source.category)) {
          validResultBy = ["severity", "policy.id"]
        }
        
        if (!validResultBy.includes(source.visualization.result.by[0])) {
          throw `Invalid visualization.result.by "${source.visualization.result.by[0]}" for policy with category "${source.category}". Allowed: ${validResultBy.join(", ")}`
        }
      } else {
        // Set default based on category
        if (source.category === "metric") {
          source.visualization.result.by = ["monitor"]
        } else if (["log", "trap", "flow"].includes(source.category)) {
          source.visualization.result.by = ["severity"]
        }
      }
      break;
    
    case "alert":
      if (source.data.points.length > 1) throw "Only 1 data point for alert"
      break;
  }
  
  // Validate category field is only used with policy type
  if (source.category && source.type !== "policy") {
    throw `Category field is only allowed when type is "policy". Current type: "${source.type}"`
  }
}
```

### Filter Validation
```typescript
function validateFilters(filters) {
  // Data filter validation
  if (filters.data.filter?.groups?.length > 3) {
    throw "Max 3 groups in data.filter"
  }
  
  filters.data.filter?.groups?.forEach(group => {
    if (group.conditions?.length > 3) {
      throw "Max 3 conditions per group"
    }
  })
  
  // Result filter validation
  if (filters.result.filter?.groups?.length > 1) {
    throw "Max 1 group in result.filter"
  }
  
  if (filters.result.filter?.groups?.[0]?.conditions?.length > 3) {
    throw "Max 3 conditions in result.filter group"
  }
}

function validateMarkers(chartProperties) {
  // Marker validation
  const markers = chartProperties.chart?.marker?.property;
  
  if (markers && markers.length > 4) {
    throw "Max 4 markers allowed in marker.property"
  }
  
  // Validate each marker has required fields
  markers?.forEach((marker, index) => {
    if (!marker.marker?.line?.type) {
      throw `Marker ${index + 1}: marker.line.type is REQUIRED`
    }
    
    const validLineTypes = ["solid.bold", "solid", "dash"];
    if (!validLineTypes.includes(marker.marker.line.type)) {
      throw `Marker ${index + 1}: Invalid marker.line.type. Must be: ${validLineTypes.join("|")}`
    }
    
    const validColors = ["CLEAR", "WARNING", "CRITICAL", "MAJOR"];
    if (marker.marker.color && !validColors.includes(marker.marker.color)) {
      throw `Marker ${index + 1}: Invalid marker.color. Must be: ${validColors.join("|")}`
    }
    
    // Validate threshold based on marker type
    if (marker.marker.type === "line" && Array.isArray(marker.marker.threshold)) {
      throw `Marker ${index + 1}: Line markers must use single number threshold`
    }
    
    if (marker.marker.type === "range" && !Array.isArray(marker.marker.threshold)) {
      throw `Marker ${index + 1}: Range markers must use array of 2 numbers [min, max]`
    }
  });
}
```

## Generation Command
When user requests a chart configuration:
1. Start with mandatory template
2. **Apply conditional logic rules** based on data source types
3. **Enforce all constraints** (data sources, data points, filters)
4. **Validate entity.type, aggregator, and visualization.result.by** against data source type rules
5. **Validate category field** - only allow for policy types
6. Apply user-specified overrides
7. **Validate against all rules** before generation
8. Ensure no mandatory fields are missing
9. Return complete, valid JSON

Remember: **Complete structure integrity + conditional logic compliance + data source type validation is non-negotiable**. Violating any constraint results in generation failure.

## Chart Properties Rules

## 🔧 System Counter Mapping Rules

### Generic Resource Term → System Counter Mapping

When users mention generic resource terms, automatically map to standard system counters for consistent monitoring across all platforms.

#### **CPU Related Terms**
**User Input:** `"cpu"`, `"processor"`, `"cpu usage"`, `"cpu utilization"`
**Default Counter:** `system.cpu.percent`
**Alternative Counters:**
- `system.cpu.user.percent` - User CPU time percentage
- `system.cpu.system.percent` - System CPU time percentage
- `system.cpu.idle.percent` - Idle CPU time percentage
- `system.cpu.iowait.percent` - I/O wait CPU time percentage
- `system.cpu.nice.percent` - Nice CPU time percentage

#### **Memory Related Terms**
**User Input:** `"memory"`, `"ram"`, `"memory usage"`, `"memory utilization"`
**Default Counter:** `system.memory.usage.percent`
**Alternative Counters:**
- `system.memory.usage` - Memory usage in bytes
- `system.memory.free` - Free memory in bytes
- `system.memory.free.percent` - Free memory percentage
- `system.memory.available` - Available memory in bytes
- `system.memory.available.percent` - Available memory percentage
- `system.memory.cached` - Cached memory in bytes
- `system.memory.buffered` - Buffered memory in bytes

#### **Disk Related Terms**
**User Input:** `"disk"`, `"storage"`, `"disk usage"`, `"disk utilization"`
**Default Counter:** `system.disk.usage.percent`
**Alternative Counters:**
- `system.disk.usage` - Disk usage in bytes
- `system.disk.free` - Free disk space in bytes
- `system.disk.free.percent` - Free disk space percentage
- `system.disk.io.read.bytes` - Disk read bytes per second
- `system.disk.io.write.bytes` - Disk write bytes per second
- `system.disk.io.read.ops` - Disk read operations per second
- `system.disk.io.write.ops` - Disk write operations per second
- `system.disk.io.time.percent` - Disk I/O time percentage

#### **Network Related Terms**
**User Input:** `"network"`, `"bandwidth"`, `"network usage"`, `"network traffic"`
**Default Counters:** `system.network.in.bytes`, `system.network.out.bytes`
**Alternative Counters:**
- `system.network.in.packets` - Network incoming packets per second
- `system.network.out.packets` - Network outgoing packets per second
- `system.network.in.errors` - Network incoming errors
- `system.network.out.errors` - Network outgoing errors
- `system.network.in.dropped` - Network incoming dropped packets
- `system.network.out.dropped` - Network outgoing dropped packets

#### **Process Related Terms**
**User Input:** `"process"`, `"processes"`, `"process count"`
**Default Counter:** `system.process.count`
**Alternative Counters:**
- `system.process.running` - Number of running processes
- `system.process.sleeping` - Number of sleeping processes
- `system.process.stopped` - Number of stopped processes
- `system.process.zombie` - Number of zombie processes

### **Default Behavior Rules**

#### **Single Resource Charts**
When user requests a single resource chart:
- **CPU**: Use `system.cpu.percent` as primary counter
- **Memory**: Use `system.memory.usage.percent` as primary counter
- **Disk**: Use `system.disk.usage.percent` as primary counter
- **Network**: Use `system.network.in.bytes` and `system.network.out.bytes` as primary counters

#### **Multi-Resource Charts**
When user requests multiple resources:
- **CPU + Memory**: Use `system.cpu.percent` and `system.memory.usage.percent`
- **CPU + Disk**: Use `system.cpu.percent` and `system.disk.usage.percent`
- **Memory + Disk**: Use `system.memory.usage.percent` and `system.disk.usage.percent`
- **All Resources**: Use percentage-based counters for consistent visualization

#### **Performance Charts**
When user requests performance analysis:
- **CPU Performance**: Use `system.cpu.user.percent`, `system.cpu.system.percent`, `system.cpu.idle.percent`
- **Memory Performance**: Use `system.memory.usage`, `system.memory.free`, `system.memory.cached`
- **Disk Performance**: Use `system.disk.io.read.bytes`, `system.disk.io.write.bytes`, `system.disk.io.time.percent`
- **Network Performance**: Use `system.network.in.bytes`, `system.network.out.bytes`, `system.network.in.packets`, `system.network.out.packets`

### **Chart Generation Logic**

#### **Example Usage Patterns**
```typescript
// User: "Create a cpu chart"
function mapUserRequestToCounter(userInput) {
  const input = userInput.toLowerCase();
  
  if (input.includes('cpu') || input.includes('processor')) {
    return {
      primary: "system.cpu.percent",
      alternatives: ["system.cpu.user.percent", "system.cpu.system.percent", "system.cpu.idle.percent"]
    };
  }
  
  if (input.includes('memory') || input.includes('ram')) {
    return {
      primary: "system.memory.usage.percent",
      alternatives: ["system.memory.usage", "system.memory.free.percent", "system.memory.available.percent"]
    };
  }
  
  if (input.includes('disk') || input.includes('storage')) {
    return {
      primary: "system.disk.usage.percent",
      alternatives: ["system.disk.usage", "system.disk.free.percent", "system.disk.io.read.bytes", "system.disk.io.write.bytes"]
    };
  }
  
  if (input.includes('network') || input.includes('bandwidth')) {
    return {
      primary: ["system.network.in.bytes", "system.network.out.bytes"],
      alternatives: ["system.network.in.packets", "system.network.out.packets"]
    };
  }
  
  // Default fallback
  return {
    primary: "system.cpu.percent",
    alternatives: []
  };
}
```

#### **Marker Thresholds by Resource Type**
```json
{
  "system.cpu.percent": {
    "warning": 70,
    "critical": 85,
    "markers": [
      {
        "marker.type": "line",
        "marker.threshold": 70,
        "marker.color": "WARNING",
        "marker.line.type": "dash",
        "marker.label": "CPU Warning (70%)"
      },
      {
        "marker.type": "line",
        "marker.threshold": 85,
        "marker.color": "CRITICAL",
        "marker.line.type": "solid.bold",
        "marker.label": "CPU Critical (85%)"
      }
    ]
  },
  "system.memory.usage.percent": {
    "warning": 80,
    "critical": 90,
    "markers": [
      {
        "marker.type": "line",
        "marker.threshold": 80,
        "marker.color": "WARNING",
        "marker.line.type": "dash",
        "marker.label": "Memory Warning (80%)"
      },
      {
        "marker.type": "line",
        "marker.threshold": 90,
        "marker.color": "CRITICAL",
        "marker.line.type": "solid.bold",
        "marker.label": "Memory Critical (90%)"
      }
    ]
  },
  "system.disk.usage.percent": {
    "warning": 75,
    "critical": 85,
    "markers": [
      {
        "marker.type": "line",
        "marker.threshold": 75,
        "marker.color": "WARNING",
        "marker.line.type": "dash",
        "marker.label": "Disk Warning (75%)"
      },
      {
        "marker.type": "line",
        "marker.threshold": 85,
        "marker.color": "CRITICAL",
        "marker.line.type": "solid.bold",
        "marker.label": "Disk Critical (85%)"
      }
    ]
  }
}
```

### **Enforcement Rules**

1. **ALWAYS use system counters** when user mentions generic resource terms
2. **NEVER use platform-specific counters** (like `hyperv.disk.used.percent`) for generic requests
3. **Apply appropriate thresholds** based on resource type
4. **Use percentage-based counters** for utilization charts
5. **Use bytes/operations counters** for performance charts
6. **Maintain consistency** across all chart generations

### **Validation Checklist for System Counter Mapping**

- [ ] User input contains generic resource terms (cpu, memory, disk, network)
- [ ] Mapped to appropriate system counter(s)
- [ ] Applied correct aggregator (usually "avg" for percentages, "sum" for bytes)
- [ ] Set appropriate marker thresholds for resource type
- [ ] Used consistent naming convention
- [ ] Applied proper visualization type for resource monitoring

This ensures **standardized, cross-platform monitoring** using universal system counters rather than vendor-specific metrics.

### ID Generation
- Generate unique integer ID if not provided
- Use format: `Math.floor(Math.random() * 1000000000000)`